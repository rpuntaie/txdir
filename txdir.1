.\" Automatically generated by Pandoc 2.7.3
.\"
.TH "txdir" "1" "" "Version 1.0.0" "txdir"
.hy
.SH NAME
.PP
\f[B]txdir\f[R] \[em] text tree for or to file tree
.SH SYNOPSIS
.PP
\f[B]txdir\f[R] [<infile>|<indir>|-] [<outdir>|-] [<options>]
.PP
Options:
.IP
.nf
\f[C]
-h: help
-v: version
-l: flat listing
-f: exclude files
-d: include dot files/directories
-n: exclude file content
-m: maximum depth
-c: commands to create directories (from https://github.com/gcmt/mktree)
\f[R]
.fi
.PP
Command line help:
.IP
.nf
\f[C]
usage: txdir [infile] [outdir] [-h] [-v] [-l] [-f] [-d] [-w] [-m M] [-c [C [C ...]]]

positional arguments:
  infile          If a file, it is expected to contain a text tree, flat or
                  indented (none or - is stdin). If a directory, the text tree
                  is created from the file tree (like the Linux tree tool).
  outdir          None or - means printing the tree to stdout. If the
                  parameter is an existing file, nothing is done. If not a
                  directory, the directory is created. The file tree is
                  created in the directory.

optional arguments:
  -h              Print help information.
  -v              Print version information.
  -l              Create a flat listing instead of an indented text tree from
                  file tree.
  -f              Omit files. Just directories, when creating a text tree from
                  a file tree.
  -d              Include dot files/directories when creating a text tree from
                  a file tree.
  -n              Omit file content when creating a text tree from a file
                  tree.
  -m M            Maximum depth to scan when creating a text tree from a file
                  tree.
  -c [C [C ...]]  Directories described with a DSL (\[aq],\[aq] = end of token, \[aq].\[aq] =
                  up dir, \[aq]/\[aq] = down) \[ga]txdir - . -c a/b,c/d..a/u,v/g.x,g\[rs].x\[ga]
                  produces the same as \[ga]mkdir -p a/{b,c}/d a/{u,v} a/x a/g.x\[ga]
\f[R]
.fi
.SH DESCRIPTION
.IP \[bu] 2
Construct a \f[I]file tree\f[R] from a text tree.
.IP \[bu] 2
Construct a \f[I]text tree\f[R] from a file tree.
.PP
This allows to edit a whole file tree within one file first, without the
necessity to switch files.
.PP
The text tree can also be templated and first run through a tool like
stpl (https://github.com/rpuntaie/stpl) before being processed by M to
produce the final file tree.
.PP
To install for user only, do:
.IP
.nf
\f[C]
pip install --user stpl
\f[R]
.fi
.SH USAGE
.PP
Without arguments it expects input from \f[C]stdin\f[R]:
.IP
.nf
\f[C]
txdir
\f[R]
.fi
.PP
Used on a directory tree, where non-text files are only in dotted
directories (e.g.
\&.git):
.IP
.nf
\f[C]
txdir .
\f[R]
.fi
.PP
it produces one text output to \f[C]stdout\f[R], similar to
\f[C]tree\f[R], but with content (unless with \f[C]-n\f[R]).
.PP
You can save the output in a file and edit it:
.IP
.nf
\f[C]
txdir -l . > thisdir.txt
\f[R]
.fi
.PP
The \f[C]-l\f[R] option make the output flat to distinguish what is
content and what is tree.
Don\[aq]t worry, you can drop the \f[C]-l\f[R], as
\f[C]txdir . | txdir - .\f[R] does not create the same tree below
\f[C]thisdir.txt\f[R], because \f[C]thisdir.txt\f[R] exists as file
already.
.PP
No directory is created unless a root directory is provided:
.IP
.nf
\f[C]
txdir . again
\f[R]
.fi
.PP
This produces the same tree below \f[C]again\f[R], almost like a
\f[C]cp -R\f[R].
But internally a text tree of the file tree is created and then applied
to the new location.
.PP
\f[B]It does not work for binary files\f[R].
If there are binary files, use \f[C]-f\f[R] to exclude files.
Note, also, \f[B]the text files must not have an empty first line\f[R].
.PP
After editing the file you can apply it on the tree again:
.IP
.nf
\f[C]
txdir thisdir.txt .
\f[R]
.fi
.SS License
.PP
MIT
