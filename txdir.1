.\" Automatically generated by Pandoc 2.7.3
.\"
.TH "txdir" "1" "" "Version 1.0.0" "txdir"
.hy
.SH NAME
.PP
\f[B]txdir\f[R] \[em] text tree from or to file tree
.SH SYNOPSIS
.PP
\f[B]txdir\f[R] [<infile>|<indir>|-] [<outdir>|-] [<options>]
.PP
Options:
.IP
.nf
\f[C]
-h: help
-v: version
-l: flat listing
-f: exclude files
-d: include dot files/directories
-n: exclude file content (don\[aq]t reapply such a tree as it will empty all files)
-m: maximum depth
-c: commands to create directories (from https://github.com/gcmt/mktree)
\f[R]
.fi
.PP
Files/dirs are ignored via .gitignore.
.PP
Command line help:
.IP
.nf
\f[C]
usage: txdir [infile] [outdir] [-h] [-v] [-l] [-f] [-d] [-n] [-m M] [-c [C [C ...]]]

Files/dirs are ignored via .gitignore. If the directory contains unignored
binary files, exclude files with \[aq]-f\[aq]. Ignoring content with \[aq]-n\[aq], then
reapplying will empty all files. NOTE: EMPTY FILES IN TEXT TREE WILL EMPTY
ACCORDING FILES IN THE FILE TREE.

positional arguments:
  infile          If a file, it is expected to contain a text tree, flat or
                  indented (none or - is stdin). If a directory, the text tree
                  is created from the file tree (like the Linux tree tool).
  outdir          None or - means printing the tree to stdout. If the
                  parameter is an existing file, nothing is done. If not a
                  directory, the directory is created. The file tree is
                  created in the directory.

optional arguments:
  -h              Print help information.
  -v              Print version information.
  -l              Create a flat listing instead of an indented text tree from
                  file tree.
  -a              Use ASCII instead of unicode when printing the indented text tree.
  -f              Omit files. Just directories, when creating a text tree from
                  a file tree.
  -d              Include dot files/directories when creating a text tree from
                  a file tree.
  -n              Omit file content when creating a text tree from a file
                  tree.
  -m M            Maximum depth to scan when creating a text tree from a file
                  tree.
  -c [C [C ...]]  Directories described with a DSL (\[aq],\[aq] = end of token, \[aq].\[aq] =
                  up dir, \[aq]/\[aq] = down) \[ga]txdir - . -c \[aq]a/b/d.c/d..a/u,v,x,g\[rs].x\[aq]\[ga]
                  produces the same as \[ga]mkdir -p a/{b,c}/d a/u a/v a/x a/g.x\[ga]
                  If not within \[aq], use \[rs]\[rs] to escape.
\f[R]
.fi
.SH DESCRIPTION
.IP \[bu] 2
Construct a \f[I]file tree\f[R] from a text tree.
.IP \[bu] 2
Construct a \f[I]text tree\f[R] from a file tree.
.PP
This allows to edit a whole file tree within one file first, without the
necessity to switch files.
.PP
The text tree can also be templated and first run through a tool like
stpl (https://github.com/rpuntaie/stpl) before being processed by M to
produce the final file tree.
.PP
To install for user only, do:
.IP
.nf
\f[C]
pip install --user txdir
\f[R]
.fi
.SH USAGE
.PP
Without arguments it expects input from \f[C]stdin\f[R]:
.IP
.nf
\f[C]
txdir
\f[R]
.fi
.PP
Exit this via \f[C]CTRL+C\f[R].
Use no input argument in combination piping, or when using -c.
.PP
Use on a directory tree where
.IP \[bu] 2
binary text files are only in dotted directories (e.g.
\&.git) or
.IP \[bu] 2
binary files are ignored via \f[C].gitignore\f[R]
.IP
.nf
\f[C]
txdir .
\f[R]
.fi
.PP
It produces text output to \f[C]stdout\f[R], similar to \f[C]tree\f[R],
but with content, unless content is suppressed with \f[C]-n\f[R].
.PP
You can save the output in a file and edit it:
.IP
.nf
\f[C]
txdir -l . > thisdir.txt
\f[R]
.fi
.PP
The \f[C]-l\f[R] option makes the output flat to distinguish what is
content and what is tree.
Don\[aq]t worry, you can also drop the \f[C]-l\f[R], as
\f[C]txdir . | txdir - .\f[R] does not create the same tree below
\f[C]thisdir.txt\f[R], because \f[C]thisdir.txt\f[R] exists as file and
not as directory.
.PP
No directory is created unless a root directory is provided as second
argument:
.IP
.nf
\f[C]
txdir thisdir.txt .
\f[R]
.fi
.PP
This applies the (edited) text tree in \f[C]thisdir.txt\f[R] on the
current directory.
.IP
.nf
\f[C]
txdir . again
\f[R]
.fi
.PP
This produces the same tree below \f[C]again\f[R], almost like a
\f[C]cp -R . again\f[R].
But internally a text tree of the file tree is created and then applied
to the new location.
.PP
\f[C]txdir\f[R] \f[B]does not work for binary files\f[R].
If there are binary files, use \f[C]-f\f[R] to exclude files.
Ignoring content with \[aq]-n\[aq], then reapplying will empty all
files.
.PP
NOTE: EMPTY FILES IN TEXT TREE WILL EMPTY ACCORDING FILES IN THE FILE
TREE.
.PP
Note, also, that \f[B]text file content must not have an empty first
line\f[R].
.SS License
.PP
MIT
